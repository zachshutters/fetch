// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xWQW/bOBP9K8R8vVW2ZcWf0ei2XWMXxiJFkPQWZQFaHMXsRiQ7HDU1Av33BSVZtmyl",
	"SYA9JZKGM4/vvZnxM+S2dNagYQ/pMxB6Z43H5uGzVDf4vULP4Umhz0k71tZACl+3KAhz1I6F9kKbH/JR",
	"qynUEXyx/IetjDo/9MX2Z4oQIQpLgreSxXo1hbqOwOdbLGVTfc1Yhr+OrENi3WJypHMch8OW5aNoAoST",
	"O9ynD/AYyylEgD9l6R4RUlhOF5cQgZPMSCHD31mmPmbZNMvUc1J/gAh450KkZ9LmIVzMby3x6rjuGIzb",
	"ECWuyaoqZ3EU3sHBETRXtjIstRErfBLz5PqvIbS7LHvKMp9lk/uPI8jqCAi/V5pQQXp3DjPqWLvvT9rN",
	"N8w53Omm1eOc6ABy+M8HwgJS+N/sYJlZp9esEauOoNRm3cbP+2KSSO7CR1dRvpUeV5JfkFBJRmGLhqV9",
	"dFDUMCphTfO+c9CQwCROkkk8n8RziKCwVEqGFEK6MSH3qb/q8iUv6fLNQESymGxtRe0h/OkwZ1RDfPOL",
	"dAgtxI5BI2SpH5HGYRl5gLWPFJaEZ0t4DCr0ZEH21GZZFcfJ8kr8bskgiStJ/yC/5LU2eNRxETTN9qs+",
	"lGXwtHBS/1q59zfiid17xk4MdiJz1Bl5D/28GUJibQp7fqvfhNcBbs+uI5uj9zYUZc3NRbpOCp3ff/uB",
	"5NsU82k8jQNx1qGRTkMKF9N4etFefds02KxL72dd/qYr7dj4va02pWYv5NFApT0sbR4Cx6GbZYhfK0jh",
	"2nruIPoOIrREoufPVu1CkdwaRtPUk8496rw5P/vm22HXdvtrs2A/UuqhUkwVNi+ONkwSx+8qezKimhVz",
	"sJJUm+Xm/8t4EiMWk0WyySeXar6cqGLxqbiI8dPlJjm12u0bBqpWL7hlqMkNckXGN1Zfr4T0Xj8YVILt",
	"0P11BIv23mMs9vzMjtZvsxqrspS0e5P4If7gpmet6pmzutvxDzhiqGPwbaiQT5JUv0UH7Tu01p/YO2ut",
	"rts6gWaSJTKSh/RubE6sV4dR1mfW4WvoCIggTDtIA/2nPoqOPfG6nPf/qe0OTPbWm8fx0WzXhpeLA4yw",
	"NB6QGlFeNVEz5atyE+Z6caJEZ53F69bpf4INjfMekeu6rv8NAAD//+zUmakeCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
